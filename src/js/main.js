import { SVGLoader } from 'svg-loader-es6';
import 'reset-css/reset.css';
import '../styles/main.scss';
import * as Data from '../assets/data';

// Generated by build workflow
import './AppInfo';

if ( process.env.NODE_ENV !== 'production' ) {
    console.warn( 'Looks like we are in development mode!' );
}

HTMLDocument.prototype.ready = () => new Promise( resolve => document.readyState === 'complete' ? resolve() : new Promise( resolve => ( document.onreadystatechange = () => document.readyState === 'complete' && resolve() ) ).then( resolve() ) );

document.ready().then( () => {
    const loadersOptions = Data.loadersOptions;

    const page = document.querySelector( '.page' );

    const createLoaders = () => loadersOptions.filter( options => page.querySelectorAll( `#${options.containerId}` ).length > 0 ).map( options => new SVGLoader( options ) );

    const prepareDom = () => {
        for ( let i = 1, l = loadersOptions.length; i <= l; i++ ) {
            const sectionEl = document.createElement( 'section' );
            const exampleEl = document.createElement( 'div' );

            exampleEl.setAttribute( 'class', 'example' );
            exampleEl.setAttribute( 'id', `example-${i}` );
            const buttonsEl = document.createElement( 'div' );

            buttonsEl.setAttribute( 'class', 'buttons' );
            const btnToggleEl = document.createElement( 'button' );

            btnToggleEl.setAttribute( 'class', 'btn-toggle' );
            btnToggleEl.setAttribute( 'id', `btn-toggle-${i}` );
            const btnDestroyEl = document.createElement( 'button' );

            btnDestroyEl.setAttribute( 'class', 'btn-destroy' );
            btnDestroyEl.setAttribute( 'id', `btn-destroy-${i}` );
            btnDestroyEl.appendChild( document.createTextNode( 'Destroy' ) );
            buttonsEl.appendChild( btnToggleEl );
            buttonsEl.appendChild( btnDestroyEl );
            sectionEl.appendChild( exampleEl );
            sectionEl.appendChild( buttonsEl );
            page.appendChild( sectionEl );
        }
    };

    const listenDom = () => {
        document.querySelectorAll( '.btn-destroy' ).forEach( btn => {
            btn.addEventListener( 'click', e => {
                const btn = e.currentTarget;
                const parent = e.currentTarget.parentElement.parentElement;

                loaders[parseInt( btn.id.replace( 'btn-destroy-', '' ), 10 ) - 1].destroy();
                btn.remove();
                parent.remove();
            } );
        } );

        document.querySelectorAll( '.btn-toggle' ).forEach( btn => {
            btn.addEventListener( 'click', e => {
                const btn = e.currentTarget;

                btn.classList.toggle( 'hidden' );
                loaders[parseInt( btn.id.replace( 'btn-toggle-', '' ), 10 ) - 1].toggle();
            } );
        } );
    };

    const listenReset = () => {
        document.querySelector( '.btn-reset' ).addEventListener( 'click', () => {
            prepareDom();
            loaders = createLoaders();
            listenDom();
        } );
        const observer = new MutationObserver( mutationsList => {
            for ( const mutation of mutationsList ) {
                if ( mutation.type === 'childList' ) {
                    const nbSections = page.querySelectorAll( 'section' ).length;

                    if ( nbSections === 0 ) {
                        page.classList.add( 'empty' );
                    } else {
                        page.classList.remove( 'empty' );
                    }
                }
            }
        } );

        observer.observe( page, {
            attributes: true,
            childList: true,
            subtree: true
        } );
    };

    let loaders = createLoaders();

    listenDom();
    listenReset();
} );
